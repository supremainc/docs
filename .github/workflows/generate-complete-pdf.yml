name: Generate PDF Document with Cover

on:
  workflow_dispatch:
    inputs:
      product_name:
        description: "제품명 (예: BioStation 3, BioStar 2)"
        required: true
        default: "BioStation 3"
      document_type:
        description: "문서 유형 (예: IG, UG, AG)"
        required: true
        default: "IG"
      version:
        description: "문서 버전"
        required: true
        default: "1.0.0"
      language:
        description: "언어 (한국어/English)"
        required: true
        default: "한국어"
        type: choice
        options:
          - "한국어"
          - "English"
      document_number:
        description: "문서 번호 (예: KO 101.00.BS3)"
        required: true
        default: "KO 101.00.BS3"
      target_url:
        description: "PDF로 변환할 웹사이트 URL"
        required: true
        default: "https://docs.supremainc.com/device/biostation_3"
      release_date:
        description: "릴리스 날짜 (YYMMDD 형식)"
        required: true
        default: "YYMMDD"

permissions:
  contents: write

env:
  PRINCE_VER: 16

jobs:
  generate-pdf:
    name: Generate Complete PDF Document
    runs-on: macos-14
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Print workflow inputs
      run: |
        echo "=== 워크플로우 입력값 ==="
        echo "제품명: ${{ github.event.inputs.product_name }}"
        echo "문서 유형: ${{ github.event.inputs.document_type }}"
        echo "버전: ${{ github.event.inputs.version }}"
        echo "언어: ${{ github.event.inputs.language }}"
        echo "문서 번호: ${{ github.event.inputs.document_number }}"
        echo "대상 URL: ${{ github.event.inputs.target_url }}"
        echo "릴리스 날짜: ${{ github.event.inputs.release_date }}"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Install Prince XML
      run: |
        curl https://www.princexml.com/download/prince-${{ env.PRINCE_VER }}-macos.zip -O
        tar zxf prince-${{ env.PRINCE_VER }}-macos.zip
        cd prince-${{ env.PRINCE_VER }}-macos
        yes "" | sudo ./install.sh

    - name: Install pdfcpu
      run: brew install pdfcpu

    - name: Install PDFtk
      run: brew install pdftk-java

    - name: Install GitHub CLI
      run: brew install gh

    - name: Setup environment variables
      run: |
        echo "📊 환경변수 설정 중..."
        
        # 언어 코드 설정
        if [ "${{ github.event.inputs.language }}" = "English" ]; then
          LANG_CODE="EN"
          LANG_DISPLAY="English"
          BACK_COVER="back-cover-en.pdf"
          COVER_VERSION="Version ${{ github.event.inputs.version }}"
        else
          LANG_CODE="KO"
          LANG_DISPLAY="한국어"
          BACK_COVER="back-cover.pdf"
          COVER_VERSION="버전 ${{ github.event.inputs.version }}"
        fi
        
        # 파일명용 안전한 문자열 생성
        PRODUCT_SAFE=$(echo "${{ github.event.inputs.product_name }}" | sed 's/ /_/g')
        DOC_TYPE_SAFE=$(echo "${{ github.event.inputs.document_type }}" | sed 's/ /_/g')
        
        # 릴리스명 설정
        RELEASE_NAME="${{ github.event.inputs.product_name }}-${{ github.event.inputs.document_type }}-${{ github.event.inputs.language }}-${{ github.event.inputs.version }}"
        
        # PDF 파일명들 설정
        MAIN_PDF_NAME="${PRODUCT_SAFE}_${DOC_TYPE_SAFE}_${{ github.event.inputs.version }}_${LANG_CODE}_${{ github.event.inputs.release_date }}.pdf"
        FINAL_PDF_NAME="${PRODUCT_SAFE}_${DOC_TYPE_SAFE}_${{ github.event.inputs.version }}_${LANG_CODE}_${{ github.event.inputs.release_date }}_Final.pdf"
        
        # 환경변수로 저장
        echo "LANG_CODE=${LANG_CODE}" >> $GITHUB_ENV
        echo "LANG_DISPLAY=${LANG_DISPLAY}" >> $GITHUB_ENV
        echo "BACK_COVER=${BACK_COVER}" >> $GITHUB_ENV
        echo "COVER_VERSION=${COVER_VERSION}" >> $GITHUB_ENV
        echo "PRODUCT_SAFE=${PRODUCT_SAFE}" >> $GITHUB_ENV
        echo "DOC_TYPE_SAFE=${DOC_TYPE_SAFE}" >> $GITHUB_ENV
        echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
        echo "MAIN_PDF_NAME=${MAIN_PDF_NAME}" >> $GITHUB_ENV
        echo "FINAL_PDF_NAME=${FINAL_PDF_NAME}" >> $GITHUB_ENV
        
        echo "✅ 환경변수 설정 완료:"
        echo "  🌐 언어: ${LANG_DISPLAY} (${LANG_CODE})"
        echo "  🏷️ 릴리스명: ${RELEASE_NAME}"
        echo "  📄 최종 PDF: ${FINAL_PDF_NAME}"

    - name: Create PDF output directory
      run: mkdir -p ./pdf

    - name: Generate front cover PDF
      run: |
        echo "📄 프론트 커버 생성 중..."
        
        # 프론트 커버 생성 (환경변수 사용)
        node generate-cover-local.js \
          --title="${{ github.event.inputs.product_name }}" \
          --subtitle="${{ github.event.inputs.document_type }}" \
          --version="${{ github.event.inputs.version }}" \
          --lang="${LANG_DISPLAY}" \
          --number="${{ github.event.inputs.document_number }}" \
          --output="./pdf/front-cover.html"
        
        # HTML을 PDF로 변환
        prince "./pdf/front-cover.html" -o "./pdf/front-cover.pdf"
        
        # 프론트 커버 PDF에서 주석 제거
        pdfcpu annot remove "./pdf/front-cover.pdf"
        
        echo "✅ 프론트 커버 완료 (주석 제거됨): ./pdf/front-cover.pdf"

    - name: Generate main document PDF
      run: |
        echo "📖 메인 문서 PDF 생성 중..."
        
        # Prince XML로 웹페이지를 PDF로 변환 (환경변수 사용)
        node generatepdf \
          -u "${{ github.event.inputs.target_url }}" \
          --prince-args="--page-size='a4' --style=./print.css --javascript" \
          -o "./pdf/${MAIN_PDF_NAME}" \
          --dest ./pdf \
          --include-index
        
        echo "✅ 메인 문서 완료: ./pdf/${MAIN_PDF_NAME}"

    - name: Remove annotations from main PDF
      run: |
        echo "🔧 PDF 주석 제거 중..."
        
        # 파일 존재 확인 후 주석 제거
        if [ -f "./pdf/${MAIN_PDF_NAME}" ]; then
          pdfcpu annot remove -pages 1 "./pdf/${MAIN_PDF_NAME}"
          echo "✅ 주석 제거 완료: ${MAIN_PDF_NAME}"
        else
          echo "❌ 오류: PDF 파일을 찾을 수 없습니다: ${MAIN_PDF_NAME}"
          exit 1
        fi

    - name: Merge all PDFs
      run: |
        echo "📑 PDF 파일 병합 중 (북마크 보존)..."
        
        # 필요한 파일들 존재 확인
        REQUIRED_FILES=("./pdf/front-cover.pdf" "./pdf/${MAIN_PDF_NAME}" "${BACK_COVER}")
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ 오류: 필요한 파일을 찾을 수 없습니다: $file"
            exit 1
          fi
        done
        
        # PDFtk를 사용하여 북마크를 보존하면서 병합
        echo "📎 PDFtk로 PDF 병합 중 (북마크 보존)..."
        pdftk "./pdf/front-cover.pdf" "./pdf/${MAIN_PDF_NAME}" "${BACK_COVER}" cat output "./pdf/${FINAL_PDF_NAME}"
        
        echo "✅ PDF 병합 완료 (북마크 보존): ./pdf/${FINAL_PDF_NAME}"

    - name: Configure PDF viewer preferences
      run: |
        echo "⚙️ PDF 뷰어 설정 적용 중..."
        
        # 최종 PDF 파일 존재 확인
        if [ ! -f "./pdf/${FINAL_PDF_NAME}" ]; then
          echo "❌ 오류: 최종 PDF 파일을 찾을 수 없습니다: ${FINAL_PDF_NAME}"
          exit 1
        fi
        
        # 뷰어 기본 설정 적용
        echo "📖 책갈피 패널 표시 설정..."
        pdfcpu pagemode set "./pdf/${FINAL_PDF_NAME}" UseOutlines
        
        echo "📄 한 페이지 레이아웃 설정..."
        pdfcpu pagelayout set "./pdf/${FINAL_PDF_NAME}" SinglePage
        
        echo "🔍 페이지에 맞추기 및 기타 뷰어 설정..."
        pdfcpu viewerpref set "./pdf/${FINAL_PDF_NAME}" '{"FitWindow": true, "CenterWindow": true}'
        
        echo "✅ PDF 뷰어 설정 완료:"
        echo "  📖 페이지 모드: UseOutlines (책갈피 패널 표시)"
        echo "  📄 페이지 레이아웃: SinglePage (한 페이지)"
        echo "  🔍 창 크기: FitWindow (페이지에 맞추기)"
        echo "  🎯 창 위치: CenterWindow (화면 중앙)"

    - name: Check and prepare release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🗑️ 기존 릴리스 및 태그 삭제 시도: ${RELEASE_NAME}"
        
        # 기존 릴리스 및 태그 삭제 (실패해도 계속 진행)
        gh release delete "${RELEASE_NAME}" -y 2>/dev/null || echo "기존 릴리스 없음 또는 삭제 실패"
        git push origin --delete "${RELEASE_NAME}" 2>/dev/null || echo "기존 태그 없음 또는 삭제 실패"
        
        echo "✅ 릴리스 준비 완료"

    - name: Create GitHub Release and Upload PDF
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🆕 새로운 릴리스 생성 및 PDF 업로드 중..."
        
        # 최종 PDF 파일 존재 확인
        if [ ! -f "./pdf/${FINAL_PDF_NAME}" ]; then
          echo "❌ 오류: 업로드할 PDF 파일을 찾을 수 없습니다: ${FINAL_PDF_NAME}"
          exit 1
        fi
        
        # 릴리스 노트 작성
        cat > release_notes.md << EOF
        # ${{ github.event.inputs.product_name }} ${{ github.event.inputs.document_type }}

        **버전:** ${{ github.event.inputs.version }}
        **문서 번호:** ${{ github.event.inputs.document_number }}
        **릴리스 날짜:** ${{ github.event.inputs.release_date }}
        **언어:** ${LANG_DISPLAY}
        **소스 URL:** ${{ github.event.inputs.target_url }}
        
        ## 📥 다운로드
        - [${FINAL_PDF_NAME}](https://github.com/${{ github.repository }}/releases/download/${RELEASE_NAME}/${FINAL_PDF_NAME})
        EOF
        
        echo "📌 릴리스명: ${RELEASE_NAME}"
        
        # 새로운 태그와 릴리스 생성
        gh release create "${RELEASE_NAME}" \
          --title "${RELEASE_NAME}" \
          --notes-file release_notes.md \
          "./pdf/${FINAL_PDF_NAME}"
        
        echo "✅ 릴리스 생성 및 PDF 업로드 완료"

    - name: Show completion summary
      run: |
        echo "🎉 PDF 생성 및 릴리스 완료!"
        echo "=========================="
        echo "📁 생성된 파일:"
        ls -la ./pdf/ | grep -E '\.(pdf|html)$' || echo "PDF 파일 없음"
        echo "=========================="
        echo "🔗 릴리스: https://github.com/${{ github.repository }}/releases/tag/${RELEASE_NAME}"
        echo "📝 릴리스명: ${RELEASE_NAME}"
        echo "📄 업로드된 파일: ${FINAL_PDF_NAME}"
        echo "🌐 언어: ${{ github.event.inputs.language }}"
        echo "📊 파일 크기:"
        if [ -f "./pdf/${FINAL_PDF_NAME}" ]; then
          ls -lh "./pdf/${FINAL_PDF_NAME}" | awk '{print "  " $5 " - " $9}'
        else
          echo "  파일 크기 확인 불가"
        fi
