name: Generate PDF Document with Cover

on:
  workflow_dispatch:
    inputs:
      product_name:
        description: "제품명 (예: BioStation 3, BioStar 2)"
        required: true
        default: "BioStation 3"
      document_type:
        description: "문서 유형 (예: IG, UG, AG)"
        required: true
        default: "IG"
      version:
        description: "문서 버전"
        required: true
        default: "1.0.0"
      language:
        description: "언어 (한국어/English)"
        required: true
        default: "한국어"
        type: choice
        options:
          - "한국어"
          - "English"
      document_number:
        description: "문서 번호 (예: KO 101.00.BS3)"
        required: true
        default: "KO 101.00.BS3"
      target_url:
        description: "PDF로 변환할 웹사이트 URL"
        required: true
        default: "https://docs.supremainc.com/device/biostation_3"
      release_date:
        description: "릴리스 날짜 (YYMMDD 형식)"
        required: true
        default: "YYMMDD"

permissions:
  contents: write

env:
  PRINCE_VER: 16

jobs:
  generate-pdf:
    name: Generate Complete PDF Document
    runs-on: macos-14
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate inputs
      run: |
        echo "🔍 입력값 검증 중..."
        
        # URL 유효성 검사
        if ! curl -sSf --head "${{ github.event.inputs.target_url }}" > /dev/null; then
          echo "❌ 오류: 대상 URL에 접근할 수 없습니다: ${{ github.event.inputs.target_url }}"
          exit 1
        fi
        
        # 날짜 형식 검증 (YYMMDD)
        if ! echo "${{ github.event.inputs.release_date }}" | grep -qE '^[0-9]{6}$'; then
          echo "❌ 오류: 릴리스 날짜는 YYMMDD 형식이어야 합니다: ${{ github.event.inputs.release_date }}"
          exit 1
        fi
        
        # 버전 형식 검증 (semantic version)
        if ! echo "${{ github.event.inputs.version }}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+'; then
          echo "❌ 오류: 버전은 x.y.z 형식이어야 합니다: ${{ github.event.inputs.version }}"
          exit 1
        fi
        
        echo "✅ 모든 입력값이 유효합니다"

    - name: Print workflow inputs
      run: |
        echo "=== 워크플로우 입력값 ==="
        echo "제품명: ${{ github.event.inputs.product_name }}"
        echo "문서 유형: ${{ github.event.inputs.document_type }}"
        echo "버전: ${{ github.event.inputs.version }}"
        echo "언어: ${{ github.event.inputs.language }}"
        echo "문서 번호: ${{ github.event.inputs.document_number }}"
        echo "대상 URL: ${{ github.event.inputs.target_url }}"
        echo "릴리스 날짜: ${{ github.event.inputs.release_date }}"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Setup tools cache
      id: tools-cache
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/bin/prince
          /opt/homebrew/bin/pdfcpu
          /opt/homebrew/bin/pdftk
          /opt/homebrew/bin/gh
        key: tools-${{ runner.os }}-${{ env.PRINCE_VER }}

    - name: Install Prince XML
      if: steps.tools-cache.outputs.cache-hit != 'true'
      run: |
        echo "📦 Prince XML 설치 중..."
        curl https://www.princexml.com/download/prince-${{ env.PRINCE_VER }}-macos.zip -O
        tar zxf prince-${{ env.PRINCE_VER }}-macos.zip
        cd prince-${{ env.PRINCE_VER }}-macos
        yes "" | sudo ./install.sh
        echo "✅ Prince XML 설치 완료"

    - name: Install other tools
      if: steps.tools-cache.outputs.cache-hit != 'true'
      run: |
        echo "📦 기타 도구 설치 중..."
        # 병렬로 설치하여 시간 단축
        brew install pdfcpu pdftk-java gh
        echo "✅ 모든 도구 설치 완료"

    - name: Verify tools installation
      run: |
        echo "🔧 도구 설치 확인 중..."
        prince --version || echo "Prince XML 확인 필요"
        pdfcpu version || echo "pdfcpu 확인 필요"  
        pdftk --version || echo "PDFtk 확인 필요"
        gh --version || echo "GitHub CLI 확인 필요"
        echo "✅ 도구 확인 완료"

    - name: Setup environment variables
      run: |
        echo "📊 환경변수 설정 중..."
        
        # 언어 코드 설정
        if [ "${{ github.event.inputs.language }}" = "English" ]; then
          LANG_CODE="EN"
          LANG_DISPLAY="English"
          BACK_COVER="back-cover-en.pdf"
          COVER_VERSION="Version ${{ github.event.inputs.version }}"
        else
          LANG_CODE="KO"
          LANG_DISPLAY="한국어"
          BACK_COVER="back-cover.pdf"
          COVER_VERSION="버전 ${{ github.event.inputs.version }}"
        fi
        
        # 파일명용 안전한 문자열 생성
        PRODUCT_SAFE=$(echo "${{ github.event.inputs.product_name }}" | sed 's/ /_/g')
        DOC_TYPE_SAFE=$(echo "${{ github.event.inputs.document_type }}" | sed 's/ /_/g')
        
        # GitHub 태그명용 안전한 릴리스명 설정 (공백, 한글 등을 안전한 문자로 변경)
        RELEASE_NAME="${PRODUCT_SAFE}-${DOC_TYPE_SAFE}-${LANG_CODE}-${{ github.event.inputs.version }}"
        
        # 사용자 친화적인 릴리스 제목 (공백과 한글 포함 가능)
        RELEASE_TITLE="${{ github.event.inputs.product_name }} ${{ github.event.inputs.document_type }} (${{ github.event.inputs.language }}) v${{ github.event.inputs.version }}"
        
        # PDF 파일명들 설정
        MAIN_PDF_NAME="${PRODUCT_SAFE}_${DOC_TYPE_SAFE}_${{ github.event.inputs.version }}_${LANG_CODE}_${{ github.event.inputs.release_date }}.pdf"
        FINAL_PDF_NAME="${PRODUCT_SAFE}_${DOC_TYPE_SAFE}_${{ github.event.inputs.version }}_${LANG_CODE}_${{ github.event.inputs.release_date }}_Final.pdf"
        
        # 환경변수로 저장
        echo "LANG_CODE=${LANG_CODE}" >> $GITHUB_ENV
        echo "LANG_DISPLAY=${LANG_DISPLAY}" >> $GITHUB_ENV
        echo "BACK_COVER=${BACK_COVER}" >> $GITHUB_ENV
        echo "COVER_VERSION=${COVER_VERSION}" >> $GITHUB_ENV
        echo "PRODUCT_SAFE=${PRODUCT_SAFE}" >> $GITHUB_ENV
        echo "DOC_TYPE_SAFE=${DOC_TYPE_SAFE}" >> $GITHUB_ENV
        echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
        echo "RELEASE_TITLE=${RELEASE_TITLE}" >> $GITHUB_ENV
        echo "MAIN_PDF_NAME=${MAIN_PDF_NAME}" >> $GITHUB_ENV
        echo "FINAL_PDF_NAME=${FINAL_PDF_NAME}" >> $GITHUB_ENV
        
        echo "✅ 환경변수 설정 완료:"
        echo "  🌐 언어: ${LANG_DISPLAY} (${LANG_CODE})"
        echo "  🏷️ 태그명: ${RELEASE_NAME}"
        echo "  📝 릴리스 제목: ${RELEASE_TITLE}"
        echo "  📄 최종 PDF: ${FINAL_PDF_NAME}"

    - name: Create PDF output directory
      run: mkdir -p ./pdf

    - name: Generate and process PDFs
      run: |
        echo "📄 PDF 생성 및 처리 시작..."
        
        # 프론트 커버 생성
        echo "📄 프론트 커버 생성 중..."
        node generate-cover-local.js \
          --title="${{ github.event.inputs.product_name }}" \
          --subtitle="${{ github.event.inputs.document_type }}" \
          --version="${{ github.event.inputs.version }}" \
          --lang="${LANG_DISPLAY}" \
          --number="${{ github.event.inputs.document_number }}" \
          --output="./pdf/front-cover.html"
        
        # 프론트 커버 HTML을 PDF로 변환
        prince "./pdf/front-cover.html" -o "./pdf/front-cover.pdf"
        
        # 메인 문서 PDF 생성
        echo "📖 메인 문서 PDF 생성 중..."
        node generatepdf \
          -u "${{ github.event.inputs.target_url }}" \
          --prince-args="--page-size='a4' --style=./print.css --javascript" \
          -o "./pdf/${MAIN_PDF_NAME}" \
          --dest ./pdf \
          --include-index
        
        # 병렬로 주석 제거 (백그라운드에서 실행)
        echo "🔧 PDF 주석 제거 중..."
        pdfcpu annot remove "./pdf/front-cover.pdf" &
        FRONT_PID=$!
        
        if [ -f "./pdf/${MAIN_PDF_NAME}" ]; then
          pdfcpu annot remove -pages 1 "./pdf/${MAIN_PDF_NAME}" &
          MAIN_PID=$!
        else
          echo "❌ 오류: 메인 PDF 파일을 찾을 수 없습니다: ${MAIN_PDF_NAME}"
          exit 1
        fi
        
        # 주석 제거 완료 대기
        wait $FRONT_PID $MAIN_PID
        echo "✅ 모든 PDF 주석 제거 완료"

    - name: Merge PDFs and configure viewer settings
      run: |
        echo "📑 PDF 파일 병합 및 뷰어 설정 중..."
        
        # 필요한 파일들 존재 확인
        REQUIRED_FILES=("./pdf/front-cover.pdf" "./pdf/${MAIN_PDF_NAME}" "${BACK_COVER}")
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ 오류: 필요한 파일을 찾을 수 없습니다: $file"
            exit 1
          fi
        done
        
        # PDFtk를 사용하여 북마크를 보존하면서 병합
        echo "📎 PDFtk로 PDF 병합 중 (북마크 보존)..."
        pdftk "./pdf/front-cover.pdf" "./pdf/${MAIN_PDF_NAME}" "${BACK_COVER}" cat output "./pdf/${FINAL_PDF_NAME}"
        
        # 병합된 파일 존재 확인
        if [ ! -f "./pdf/${FINAL_PDF_NAME}" ]; then
          echo "❌ 오류: PDF 병합 실패 - 파일이 생성되지 않았습니다"
          exit 1
        fi
        
        # 뷰어 설정을 순차적으로 적용 (파일 충돌 방지)
        echo "⚙️ PDF 뷰어 설정 적용 중..."
        
        echo "📖 책갈피 패널 표시 설정..."
        pdfcpu pagemode set "./pdf/${FINAL_PDF_NAME}" UseOutlines
        
        echo "📄 한 페이지 레이아웃 설정..."
        pdfcpu pagelayout set "./pdf/${FINAL_PDF_NAME}" SinglePage
        
        echo "🔍 뷰어 환경설정 적용..."
        pdfcpu viewerpref set "./pdf/${FINAL_PDF_NAME}" '{"FitWindow": true, "CenterWindow": true}'
        
        echo "✅ PDF 병합 및 뷰어 설정 완료:"
        echo "  📎 파일: ./pdf/${FINAL_PDF_NAME}"
        echo "  📖 페이지 모드: UseOutlines (책갈피 패널)"
        echo "  📄 레이아웃: SinglePage"
        echo "  🔍 뷰어 설정: FitWindow, CenterWindow"

    - name: Check and prepare release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🗑️ 기존 릴리스 및 태그 정리 중: ${RELEASE_NAME}"
        
        # 기존 릴리스 삭제 시도 (최대 3회 재시도)
        for i in {1..3}; do
          if gh release delete "${RELEASE_NAME}" -y 2>/dev/null; then
            echo "✅ 기존 릴리스 삭제 완료 (시도 $i/3)"
            break
          else
            if [ $i -eq 3 ]; then
              echo "ℹ️ 기존 릴리스 없음 또는 삭제 실패 (최종)"
            else
              echo "⏳ 릴리스 삭제 재시도 중... ($i/3)"
              sleep 2
            fi
          fi
        done
        
        # 기존 태그 삭제 시도
        git push origin --delete "${RELEASE_NAME}" 2>/dev/null || echo "ℹ️ 기존 태그 없음 또는 삭제 실패"
        
        echo "✅ 릴리스 준비 완료"

    - name: Create GitHub Release and Upload PDF
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🆕 새로운 릴리스 생성 및 PDF 업로드 중..."
        
        # 최종 PDF 파일 존재 및 크기 확인
        if [ ! -f "./pdf/${FINAL_PDF_NAME}" ]; then
          echo "❌ 오류: 업로드할 PDF 파일을 찾을 수 없습니다: ${FINAL_PDF_NAME}"
          exit 1
        fi
        
        FILE_SIZE=$(ls -lh "./pdf/${FINAL_PDF_NAME}" | awk '{print $5}')
        echo "📊 PDF 파일 크기: ${FILE_SIZE}"
        
        # 파일 크기가 너무 작으면 경고 (1MB 미만)
        FILE_SIZE_BYTES=$(stat -c%s "./pdf/${FINAL_PDF_NAME}" 2>/dev/null || stat -f%z "./pdf/${FINAL_PDF_NAME}")
        if [ "${FILE_SIZE_BYTES}" -lt 1048576 ]; then
          echo "⚠️ 경고: PDF 파일 크기가 작습니다 (${FILE_SIZE}). 내용을 확인해주세요."
        fi
        
        # 릴리스 노트 작성 (더 상세한 정보 포함)
        cat > release_notes.md << EOF
        # ${{ github.event.inputs.product_name }} ${{ github.event.inputs.document_type }}

        **버전:** ${{ github.event.inputs.version }}
        **문서 번호:** ${{ github.event.inputs.document_number }}
        **릴리스 날짜:** ${{ github.event.inputs.release_date }}
        **언어:** ${LANG_DISPLAY}
        **소스 URL:** ${{ github.event.inputs.target_url }}
        **파일 크기:** ${FILE_SIZE}
        **생성 일시:** $(date '+%Y-%m-%d %H:%M:%S UTC')

        ## 📥 다운로드
        - [${FINAL_PDF_NAME}](https://github.com/${{ github.repository }}/releases/download/${RELEASE_NAME}/${FINAL_PDF_NAME})

        ## 🔧 기술 정보
        - PDF 뷰어 설정: 책갈피 패널 표시, 한 페이지 레이아웃
        - 북마크: 보존됨
        - 페이지 크기: A4
        EOF
        
        echo "📌 태그명: ${RELEASE_NAME}"
        echo "📝 릴리스 제목: ${RELEASE_TITLE}"
        
        # 릴리스 생성 재시도 로직
        for i in {1..3}; do
          if gh release create "${RELEASE_NAME}" \
            --title "${RELEASE_TITLE}" \
            --notes-file release_notes.md \
            "./pdf/${FINAL_PDF_NAME}"; then
            echo "✅ 릴리스 생성 및 PDF 업로드 완료 (시도 $i/3)"
            break
          else
            if [ $i -eq 3 ]; then
              echo "❌ 릴리스 생성 실패 (최종 시도)"
              exit 1
            else
              echo "⏳ 릴리스 생성 재시도 중... ($i/3)"
              sleep 5
            fi
          fi
        done

    - name: Show completion summary
      run: |
        echo "🎉 PDF 생성 및 릴리스 완료!"
        echo "=========================="
        echo "📁 생성된 파일:"
        ls -la ./pdf/ | grep -E '\.(pdf|html)$' || echo "PDF 파일 없음"
        echo "=========================="
        echo "🔗 릴리스: https://github.com/${{ github.repository }}/releases/tag/${RELEASE_NAME}"
        echo "📝 릴리스 제목: ${RELEASE_TITLE}"
        echo "🏷️ 태그명: ${RELEASE_NAME}"
        echo "📄 업로드된 파일: ${FINAL_PDF_NAME}"
        echo "🌐 언어: ${{ github.event.inputs.language }}"
        echo "📊 파일 크기:"
        if [ -f "./pdf/${FINAL_PDF_NAME}" ]; then
          ls -lh "./pdf/${FINAL_PDF_NAME}" | awk '{print "  " $5 " - " $9}'
        else
          echo "  파일 크기 확인 불가"
        fi
